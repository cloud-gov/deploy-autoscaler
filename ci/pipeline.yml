---

# Notes:
# - Do not run the acceptance tests in parallel, there is a cleanup.sh script which will conflict with other runs in parallel, serial_groups are the enforcement of this
# - As of now, the "app" acceptance tests fail on custom metrics.  Downstream deploys are explicitly not dependent on the app tests to pass for now.
# - The three "*-debug" jobs can be commented out once autoscaler is in normal operating mode, these exist to shorten the test cycle of debugging the acceptance tests against dev

# Deploy Development

jobs:

- name: set-self
  plan:
    - get: autoscaler-manifests
      resource: autoscaler-manifests
      trigger: true
    - set_pipeline: self
      file: autoscaler-manifests/ci/pipeline.yml
- name: deploy-app-autoscaler-development
  serial: true
  serial_groups: [development]
  plan:
  - in_parallel:
    - get: app-autoscaler-release
    - get: release
      trigger: true
    - get: autoscaler-manifests
      resource: autoscaler-manifests
      trigger: true
      passed: [set-self]
    - get: terraform-yaml
      resource: terraform-yaml-development
      trigger: true
    - get: cf-stemcell-jammy
      trigger: true
    - get: pipeline-tasks
  - task: terraform-secrets
    file: autoscaler-manifests/ci/terraform-secrets.yml
  - put: autoscaler-deployment-development
    params: &deploy-params
      manifest: app-autoscaler-release/templates/app-autoscaler.yml
      releases:
      - release/app-autoscaler-v*.tgz
      stemcells:
      - cf-stemcell-jammy/*.tgz
      ops_files:
      - autoscaler-manifests/bosh/opsfiles/instance-identity-cert-from-cf-dev.yml
      - autoscaler-manifests/bosh/opsfiles/enable-nats-tls-dev.yml
      - app-autoscaler-release/operations/add-extra-plan.yml
      - autoscaler-manifests/bosh/opsfiles/configure-log-cache-and-forward-metrics-via-mtls-dev.yml
      - app-autoscaler-release/operations/external-db.yml
      - autoscaler-manifests/bosh/opsfiles/bosh-dns-cf-deployment-name.yml
      - app-autoscaler-release/operations/enable-scheduler-logging.yml
      - autoscaler-manifests/bosh/opsfiles/cf-uaa-client-secret-dev.yml
      - autoscaler-manifests/bosh/opsfiles/certificates.yml
      - autoscaler-manifests/bosh/opsfiles/releases.yml
      - autoscaler-manifests/bosh/opsfiles/scaling-dev.yml
      vars_files:
      - autoscaler-manifests/bosh/varsfiles/development.yml
      - terraform-secrets/terraform.yml
  - task: enable-service-access
    file: pipeline-tasks/set-plan-visibility.yml
    params:
      CF_API_URL: ((cf.development.api))
      CF_USERNAME: ((admin_user_development))
      CF_PASSWORD: ((admin_password_development))
      CF_ORGANIZATION: ((broker-organization))
      CF_SPACE: ((broker-space))
      BROKER_NAME: ((broker-name))
      SERVICES: ((cf.development.services))
      SERVICE_ORGANIZATION: ((service_organization_development))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed CF App Autoscaler on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy CF App Autoscaler on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: delete-dev-after-hours
  serial: true
  serial_groups: [development]
  plan:
  - in_parallel:
    - get: after-hours
      trigger: true
    - get: autoscaler-manifests
      passed: [deploy-app-autoscaler-development]
    - get: release
      passed: [deploy-app-autoscaler-development]
  - task: delete-deployment
    file: autoscaler-manifests/ci/delete-deployment.yml
    params:
      BOSH_CA_CERT: ((bosh-director-info.development.ca_cert))
      BOSH_ENVIRONMENT: ((bosh-director-info.development.environment))
      BOSH_CLIENT: ((bosh-director-info.development.client))
      BOSH_CLIENT_SECRET: ((bosh-director-info.development.client_secret))
      BOSH_ENV_NAME: development

## Enable these 3 to more quickly debug changes to acceptance-tests.sh, bypasses the need to first deploy autoscaler to dev

#- name: acceptance-tests-broker-development-debug
#  serial_groups: [development, debug]
#  plan:
#  - in_parallel:
#    - get: autoscaler-manifests-test                               #Modified resource to do testing
#      trigger: true
#  - task: acceptance-tests
#    file: autoscaler-manifests-test/ci/acceptance-tests-debug.yml  #Modified resource to do testing
#    params:
#      CF_API: ((cf.development.api))
#      CF_APPS_DOMAIN: ((cf.development.apps_domain))
#      CF_ADMIN_USER: ((admin_user_development))
#      CF_ADMIN_PASSWORD: ((admin_password_development))
#      AUTOSCALER_API: ((cf.development.autoscaler_api))
#      COMPONENT_TO_TEST: broker
#      AUTOSCALER_CF_ORG: ((cf.development.org))
#      AUTOSCALER_CF_SPACE: ((cf.development.space))
#
#
#- name: acceptance-tests-api-development-debug
#  serial_groups: [development, debug]
#  plan:
#  - in_parallel:
#    - get: autoscaler-manifests-test                               #Modified resource to do testing
#      trigger: true
#  - task: acceptance-tests
#    file: autoscaler-manifests-test/ci/acceptance-tests-debug.yml  #Modified resource to do testing
#    params:
#      CF_API: ((cf.development.api))
#      CF_APPS_DOMAIN: ((cf.development.apps_domain))
#      CF_ADMIN_USER: ((admin_user_development))
#      CF_ADMIN_PASSWORD: ((admin_password_development))
#      AUTOSCALER_API: ((cf.development.autoscaler_api))
#      COMPONENT_TO_TEST: api
#      AUTOSCALER_CF_ORG: ((cf.development.org))
#      AUTOSCALER_CF_SPACE: ((cf.development.space))
#
#
#- name: acceptance-tests-app-development-debug
#  serial_groups: [development, debug]
#  plan:
#  - in_parallel:
#    - get: autoscaler-manifests-test                               #Modified resource to do testing
#      trigger: true
#  - task: acceptance-tests
#    file: autoscaler-manifests-test/ci/acceptance-tests-debug.yml  #Modified resource to do testing
#    params:
#      CF_API: ((cf.development.api))
#      CF_APPS_DOMAIN: ((cf.development.apps_domain))
#      CF_ADMIN_USER: ((admin_user_development))
#      CF_ADMIN_PASSWORD: ((admin_password_development))
#      AUTOSCALER_API: ((cf.development.autoscaler_api))
#      COMPONENT_TO_TEST: app
#      AUTOSCALER_CF_ORG: ((cf.development.org))
#      AUTOSCALER_CF_SPACE: ((cf.development.space))

## Acceptance tests for dev

- name: acceptance-tests-broker-development
  serial_groups: [development]
  plan:
  - in_parallel:
    - get: autoscaler-manifests
      trigger: true
      passed: [deploy-app-autoscaler-development]
    - get: release
      passed: [deploy-app-autoscaler-development]
      trigger: true
  - task: acceptance-tests
    file: autoscaler-manifests/ci/acceptance-tests.yml
    params:
      CF_API: ((cf.development.api))
      CF_APPS_DOMAIN: ((cf.development.apps_domain))
      CF_ADMIN_USER: ((admin_user_development))
      CF_ADMIN_PASSWORD: ((admin_password_development))
      AUTOSCALER_API: ((cf.development.autoscaler_api))
      COMPONENT_TO_TEST: broker
      AUTOSCALER_CF_ORG: ((cf.development.org))
      AUTOSCALER_CF_SPACE: ((cf.development.space))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully tested the broker component of CF App Autoscaler on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED testing the broker component of CF App Autoscaler on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: acceptance-tests-api-development
  serial_groups: [development]
  plan:
  - in_parallel:
    - get: autoscaler-manifests
      trigger: true
      passed: [deploy-app-autoscaler-development]
    - get: release
      passed: [deploy-app-autoscaler-development]
      trigger: true
  - task: acceptance-tests
    file: autoscaler-manifests/ci/acceptance-tests.yml
    params:
      CF_API: ((cf.development.api))
      CF_APPS_DOMAIN: ((cf.development.apps_domain))
      CF_ADMIN_USER: ((admin_user_development))
      CF_ADMIN_PASSWORD: ((admin_password_development))
      AUTOSCALER_API: ((cf.development.autoscaler_api))
      COMPONENT_TO_TEST: api
      AUTOSCALER_CF_ORG: ((cf.development.org))
      AUTOSCALER_CF_SPACE: ((cf.development.space))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully tested the api component of CF App Autoscaler on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED testing the api component of CF App Autoscaler on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))


- name: acceptance-tests-app-development
  serial_groups: [development]
  plan:
  - in_parallel:
    - get: autoscaler-manifests
      trigger: true
      passed: [deploy-app-autoscaler-development]
    - get: release
      passed: [deploy-app-autoscaler-development]
      trigger: true
  - task: acceptance-tests
    file: autoscaler-manifests/ci/acceptance-tests.yml
    params:
      CF_API: ((cf.development.api))
      CF_APPS_DOMAIN: ((cf.development.apps_domain))
      CF_ADMIN_USER: ((admin_user_development))
      CF_ADMIN_PASSWORD: ((admin_password_development))
      AUTOSCALER_API: ((cf.development.autoscaler_api))
      COMPONENT_TO_TEST: app
      AUTOSCALER_CF_ORG: ((cf.development.org))
      AUTOSCALER_CF_SPACE: ((cf.development.space))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully tested the app component of CF App Autoscaler on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED testing the app component of CF App Autoscaler on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))


# Deploy Staging

- name: deploy-app-autoscaler-staging
  serial: true
  serial_groups: [staging]
  plan:
  - in_parallel:
    - get: app-autoscaler-release
      passed: [deploy-app-autoscaler-development]
      trigger: true
    - get: release
      passed: [deploy-app-autoscaler-development]
      trigger: true
    - get: autoscaler-manifests
      resource: autoscaler-manifests
      passed: [acceptance-tests-api-development, acceptance-tests-broker-development ]
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-staging
    - get: cf-stemcell-jammy
      passed: [deploy-app-autoscaler-development]
      trigger: true
    - get: pipeline-tasks
  - task: terraform-secrets
    file: autoscaler-manifests/ci/terraform-secrets.yml
  - put: autoscaler-deployment-staging
    params:
      manifest: app-autoscaler-release/templates/app-autoscaler.yml
      releases:
      - release/app-autoscaler-v*.tgz
      stemcells:
      - cf-stemcell-jammy/*.tgz
      ops_files:
      - autoscaler-manifests/bosh/opsfiles/instance-identity-cert-from-cf-stage.yml
      - autoscaler-manifests/bosh/opsfiles/enable-nats-tls-stage.yml
      - app-autoscaler-release/operations/add-extra-plan.yml
      - autoscaler-manifests/bosh/opsfiles/configure-log-cache-and-forward-metrics-via-mtls-stage.yml
      - app-autoscaler-release/operations/external-db.yml
      - autoscaler-manifests/bosh/opsfiles/bosh-dns-cf-deployment-name.yml
      - app-autoscaler-release/operations/enable-scheduler-logging.yml
      - autoscaler-manifests/bosh/opsfiles/cf-uaa-client-secret-stage.yml
      - autoscaler-manifests/bosh/opsfiles/certificates.yml
      - autoscaler-manifests/bosh/opsfiles/releases.yml
      - autoscaler-manifests/bosh/opsfiles/scaling-stage.yml
      vars_files:
      - autoscaler-manifests/bosh/varsfiles/staging.yml
      - terraform-secrets/terraform.yml
  - task: enable-service-access
    file: pipeline-tasks/set-plan-visibility.yml
    params:
      CF_API_URL: ((cf.staging.api))
      CF_USERNAME: ((admin_user_staging))
      CF_PASSWORD: ((admin_password_staging))
      CF_ORGANIZATION: ((broker-organization))
      CF_SPACE: ((broker-space))
      BROKER_NAME: ((broker-name))
      SERVICES: ((cf.staging.services))
      SERVICE_ORGANIZATION: ((service_organization_staging))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed CF App Autoscaler on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel:  "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy CF App Autoscaler on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: delete-staging-after-hours
  serial: true
  serial_groups: [staging]
  plan:
  - in_parallel:
    - get: after-hours
      trigger: true
    - get: autoscaler-manifests
      passed: [deploy-app-autoscaler-staging]
    - get: release
      passed: [deploy-app-autoscaler-staging]
  - task: delete-deployment
    file: autoscaler-manifests/ci/delete-deployment.yml
    params:
      BOSH_CA_CERT: ((bosh-director-info.staging.ca_cert))
      BOSH_ENVIRONMENT: ((bosh-director-info.staging.environment))
      BOSH_CLIENT: ((bosh-director-info.staging.client))
      BOSH_CLIENT_SECRET: ((bosh-director-info.staging.client_secret))
      BOSH_ENV_NAME: staging

## Acceptance tests for Staging

- name: acceptance-tests-broker-staging
  serial_groups: [staging]
  plan:
  - in_parallel:
    - get: autoscaler-manifests
      trigger: true
      passed: [deploy-app-autoscaler-staging]
    - get: release
      passed: [deploy-app-autoscaler-staging]
      trigger: true
  - task: acceptance-tests
    file: autoscaler-manifests/ci/acceptance-tests.yml
    params:
      CF_API: ((cf.staging.api))
      CF_APPS_DOMAIN: ((cf.staging.apps_domain))
      CF_ADMIN_USER: ((admin_user_staging))
      CF_ADMIN_PASSWORD: ((admin_password_staging))
      AUTOSCALER_API: ((cf.staging.autoscaler_api))
      COMPONENT_TO_TEST: broker
      AUTOSCALER_CF_ORG: ((cf.staging.org))
      AUTOSCALER_CF_SPACE: ((cf.staging.space))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully tested the broker component of CF App Autoscaler on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED testing the broker component of CF App Autoscaler on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acceptance-tests-api-staging
  serial_groups: [staging]
  plan:
  - in_parallel:
    - get: autoscaler-manifests
      trigger: true
      passed: [deploy-app-autoscaler-staging]
    - get: release
      passed: [deploy-app-autoscaler-staging]
      trigger: true
  - task: acceptance-tests
    file: autoscaler-manifests/ci/acceptance-tests.yml
    params:
      CF_API: ((cf.staging.api))
      CF_APPS_DOMAIN: ((cf.staging.apps_domain))
      CF_ADMIN_USER: ((admin_user_staging))
      CF_ADMIN_PASSWORD: ((admin_password_staging))
      AUTOSCALER_API: ((cf.staging.autoscaler_api))
      COMPONENT_TO_TEST: api
      AUTOSCALER_CF_ORG: ((cf.staging.org))
      AUTOSCALER_CF_SPACE: ((cf.staging.space))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully tested the api component of CF App Autoscaler on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED testing the api component of CF App Autoscaler on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acceptance-tests-app-staging
  serial_groups: [staging]
  plan:
  - in_parallel:
    - get: autoscaler-manifests
      trigger: true
      passed: [deploy-app-autoscaler-staging]
    - get: release
      passed: [deploy-app-autoscaler-staging]
      trigger: true
  - task: acceptance-tests
    file: autoscaler-manifests/ci/acceptance-tests.yml
    params:
      CF_API: ((cf.staging.api))
      CF_APPS_DOMAIN: ((cf.staging.apps_domain))
      CF_ADMIN_USER: ((admin_user_staging))
      CF_ADMIN_PASSWORD: ((admin_password_staging))
      AUTOSCALER_API: ((cf.staging.autoscaler_api))
      COMPONENT_TO_TEST: app
      AUTOSCALER_CF_ORG: ((cf.staging.org))
      AUTOSCALER_CF_SPACE: ((cf.staging.space))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully tested the app component of CF App Autoscaler on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED testing the app component of CF App Autoscaler on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))

# Deploy Production

- name: deploy-app-autoscaler-production
  serial_groups: [production]
  serial: true
  plan:
  - in_parallel:
    - get: app-autoscaler-release
      passed: [deploy-app-autoscaler-staging]
      trigger: true
    - get: release
      passed: [deploy-app-autoscaler-staging]
      trigger: true
    - get: autoscaler-manifests
      resource: autoscaler-manifests
      passed: [acceptance-tests-api-staging, acceptance-tests-broker-staging]
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-production
    - get: cf-stemcell-jammy
      passed: [deploy-app-autoscaler-staging]
      trigger: true
    - get: pipeline-tasks
  - task: terraform-secrets
    file: autoscaler-manifests/ci/terraform-secrets.yml
  - put: autoscaler-deployment-production
    params:
      manifest: app-autoscaler-release/templates/app-autoscaler.yml
      releases:
      - release/app-autoscaler-v*.tgz
      stemcells:
      - cf-stemcell-jammy/*.tgz
      ops_files:
      - autoscaler-manifests/bosh/opsfiles/instance-identity-cert-from-cf-prod.yml
      - autoscaler-manifests/bosh/opsfiles/enable-nats-tls-prod.yml
      - app-autoscaler-release/operations/add-extra-plan.yml
      - autoscaler-manifests/bosh/opsfiles/configure-log-cache-and-forward-metrics-via-mtls-prod.yml
      - autoscaler-manifests/bosh/opsfiles/external-db.yml
      - autoscaler-manifests/bosh/opsfiles/bosh-dns-cf-deployment-name.yml
      - app-autoscaler-release/operations/enable-scheduler-logging.yml
      - autoscaler-manifests/bosh/opsfiles/cf-uaa-client-secret-prod.yml
      - autoscaler-manifests/bosh/opsfiles/certificates.yml
      - autoscaler-manifests/bosh/opsfiles/releases.yml
      - autoscaler-manifests/bosh/opsfiles/scaling-prod.yml
      vars_files:
      - autoscaler-manifests/bosh/varsfiles/production.yml
      - terraform-secrets/terraform.yml
  - task: enable-service-access
    file: pipeline-tasks/set-plan-visibility.yml
    params:
      CF_API_URL: ((cf.production.api))
      CF_USERNAME: ((admin_user_production))
      CF_PASSWORD: ((admin_password_production))
      CF_ORGANIZATION: ((broker-organization))
      CF_SPACE: ((broker-space))
      BROKER_NAME: ((broker-name))
      SERVICES: ((cf.production.services))
      SERVICE_ORGANIZATION: ((service_organization_production))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed CF App Autoscaler on prod
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy CF App Autoscaler on prod
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform"
      username: ((slack-username))
      icon_url: ((slack-icon-url))



## Acceptance tests for Production

- name: acceptance-tests-broker-production
  serial_groups: [production]
  plan:
  - in_parallel:
    - get: autoscaler-manifests
      trigger: true
      passed: [deploy-app-autoscaler-production]
    - get: release
      passed: [deploy-app-autoscaler-production]
      trigger: true
  - task: acceptance-tests
    file: autoscaler-manifests/ci/acceptance-tests.yml
    params:
      CF_API: ((cf.production.api))
      CF_APPS_DOMAIN: ((cf.production.apps_domain))
      CF_ADMIN_USER: ((admin_user_production))
      CF_ADMIN_PASSWORD: ((admin_password_production))
      AUTOSCALER_API: ((cf.production.autoscaler_api))
      COMPONENT_TO_TEST: broker
      AUTOSCALER_CF_ORG: ((cf.production.org))
      AUTOSCALER_CF_SPACE: ((cf.production.space))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully tested the broker component of CF App Autoscaler on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED testing the broker component of CF App Autoscaler on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform"
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acceptance-tests-api-production
  serial_groups: [production]
  plan:
  - in_parallel:
    - get: autoscaler-manifests
      trigger: true
      passed: [deploy-app-autoscaler-production]
    - get: release
      passed: [deploy-app-autoscaler-production]
      trigger: true
  - task: acceptance-tests
    file: autoscaler-manifests/ci/acceptance-tests.yml
    params:
      CF_API: ((cf.production.api))
      CF_APPS_DOMAIN: ((cf.production.apps_domain))
      CF_ADMIN_USER: ((admin_user_production))
      CF_ADMIN_PASSWORD: ((admin_password_production))
      AUTOSCALER_API: ((cf.production.autoscaler_api))
      COMPONENT_TO_TEST: api
      AUTOSCALER_CF_ORG: ((cf.production.org))
      AUTOSCALER_CF_SPACE: ((cf.production.space))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully tested the api component of CF App Autoscaler on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED testing the api component of CF App Autoscaler on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform"
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: acceptance-tests-app-production
  serial_groups: [production]
  plan:
  - in_parallel:
    - get: autoscaler-manifests
      trigger: true
      passed: [deploy-app-autoscaler-production]
    - get: release
      passed: [deploy-app-autoscaler-production]
      trigger: true
  - task: acceptance-tests
    file: autoscaler-manifests/ci/acceptance-tests.yml
    params:
      CF_API: ((cf.production.api))
      CF_APPS_DOMAIN: ((cf.production.apps_domain))
      CF_ADMIN_USER: ((admin_user_production))
      CF_ADMIN_PASSWORD: ((admin_password_production))
      AUTOSCALER_API: ((cf.production.autoscaler_api))
      COMPONENT_TO_TEST: app
      AUTOSCALER_CF_ORG: ((cf.production.org))
      AUTOSCALER_CF_SPACE: ((cf.production.space))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully tested the app component of CF App Autoscaler on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED testing the app component of CF App Autoscaler on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: "#cg-platform-news"
      username: ((slack-username))
      icon_url: ((slack-icon-url))




# Resources

resources:
- name: app-autoscaler-release   #Used as input for folder structure for upstream ops files
  type: git
  source:
    uri: https://github.com/cloudfoundry/app-autoscaler-release
    branch: main
    tag_filter: "v*"

- name: autoscaler-manifests     #Used as input for folder structure for custom ops files
  type: git
  source:
    uri: https://github.com/cloud-gov/cg-deploy-autoscaler.git
    branch: main
    paths:
    - ci/*
    - bosh/*

- name: release                  #Used to detect when new bosh releases are cut
  type: github-release
  source:
    owner: cloudfoundry
    repository: app-autoscaler-release


#- name: autoscaler-manifests-test
#  type: git
#  source:
#    uri: https://github.com/cloud-gov/cg-deploy-autoscaler.git
#    branch: main
#    paths:
#    - ci/*
#    - bosh/*

- name: pipeline-tasks
  type: git
  source:
    uri: ((pipeline-tasks-git-url))
    branch: main
    commit_verification_keys: ((cloud-gov-pgp-keys))


- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-development))
    region_name: ((aws-region))


- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-staging))
    region_name: ((aws-region))

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-production))
    region_name: ((aws-region))



- name: cf-stemcell-jammy
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-jammy-go_agent


- name: autoscaler-deployment-development
  type: bosh-deployment
  source:
    target: ((bosh-director-info.development.environment))
    client: ((bosh-director-info.development.client))
    client_secret: ((bosh-director-info.development.client_secret))
    ca_cert: ((bosh-director-info.development.ca_cert))
    deployment: app-autoscaler


- name: autoscaler-deployment-staging
  type: bosh-deployment
  source:
    target: ((bosh-director-info.staging.environment))
    client: ((bosh-director-info.staging.client))
    client_secret: ((bosh-director-info.staging.client_secret))
    ca_cert: ((bosh-director-info.staging.ca_cert))
    deployment: app-autoscaler

- name: autoscaler-deployment-production
  type: bosh-deployment
  source:
    target: ((bosh-director-info.production.environment))
    client: ((bosh-director-info.production.client))
    client_secret: ((bosh-director-info.production.client-secret))
    ca_cert: ((bosh-director-info.production.ca_cert))
    deployment: app-autoscaler

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))


- name: after-hours
  type: time
  source:
    start: 6:00 PM
    stop: 7:00 PM
    location: America/Los_Angeles



resource_types:
- name: registry-image
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: registry-image-resource
    aws_region: us-gov-west-1
    tag: latest

- name: slack-notification
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: slack-notification-resource
    aws_region: us-gov-west-1
    tag: latest

- name: bosh-deployment
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: bosh-deployment-resource
    aws_region: us-gov-west-1
    tag: latest

- name: s3-iam
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: s3-resource
    aws_region: us-gov-west-1
    tag: latest

- name: git
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: git-resource
    aws_region: us-gov-west-1
    tag: latest

- name: time
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: time-resource
    aws_region: us-gov-west-1
    tag: latest

- name: github-release
  type: registry-image
  source:
    aws_access_key_id: ((ecr_aws_key))
    aws_secret_access_key: ((ecr_aws_secret))
    repository: github-release-resource
    aws_region: us-gov-west-1
    tag: latest
